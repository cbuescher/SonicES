/*
 * This source file was generated by the Gradle 'init' task
 */
package org.soc.sonices;

import co.elastic.clients.elasticsearch.core.SearchResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.sound.midi.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class SonicESApp {
    private static Logger LOGGER = LogManager.getLogger(SonicESApp.class);

    private static final String CONFIGFILE = "sonices.conf";


    public static void main(String[] args) throws InvalidMidiDataException, InterruptedException, IOException, MidiUnavailableException {
        MidiHandler mh = new MidiHandler("Bus 1");
        Sequencer sequencer = MidiSystem.getSequencer(false);
        sequencer.getTransmitter().setReceiver(mh.receiver);


        // query part
        Properties configuration = new Properties();
        try {
            configuration.load(new FileInputStream(CONFIGFILE));
        } catch (IOException e) {
            LOGGER.error("Cannot read configuration file" + CONFIGFILE + ", aborting...");
            System.exit(1);
        }

        ESClient client = new ESClient(configuration);
        SearchResponse<Void> response = LogLevel5mSketch.queryForLofLevels(client);
        Sequence sequence = LogLevel5mSketch.convertToSequence(response);

        sequencer.setSequence(sequence);
        LOGGER.info("start sequence");
        sequencer.open();
        sequencer.start();
        Thread.sleep(5 * 60 * 1000);
        LOGGER.info("stop sequence");
        sequencer.close();
        mh.close();

        System.exit(0);
    }
}
